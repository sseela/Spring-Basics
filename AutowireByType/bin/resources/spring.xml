<!-- Autowire - Auto DI. Auto DI will be done only for secondary types. For primitives, Auto DI is not applicable. We have to manually inject primitive types by property tag-->

<!-- Types:
	1. byType: auto DI will be done for beans which has respective setters. While creating bean, it will check the type of class only. If two or more beans are present with class names, then ambuiguity arises, hence in that case we have to use autowire-candidate="false" to solve that ambuiguity.
	2. byName
	3. constructor
	4. autoDetect -->

<!-- setter DI: byType, byName
constructor DI: constructor
autoDetect: works for both -->

<beans xmlns = "http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

	<bean id="car" class="beans.Car" autowire="byType">
		<property name="price" value="324234"/>
	</bean>
	
	<bean id="e1" class="beans.Engine">
		<property name="model" value="2018"/>
	</bean>
	
	<bean id="e2" class="beans.Engine" autowire-candidate="false">
	</bean>
</beans>